services:
  - type: worker
    name: esimbot-worker
    env: python
    buildCommand: |
      # Ensure our fallback module is available
      echo "Preparing fallback modules..."
      
      # Create the fallback module if it doesn't exist
      if [ ! -f "fallback_solana.py" ]; then
        echo 'Creating fallback solana module...'
        cat > fallback_solana.py << 'EOL'
"""
Fallback solana module stub for when the real solana package can't be installed.
This provides minimal functionality required by solana_payments.py.
"""

import logging
logger = logging.getLogger(__name__)

logger.warning("Using fallback solana module! This is a minimal implementation and not all features will work.")

# Version for logging
__version__ = "0.31.0-fallback"

class rpc:
    class api:
        class Client:
            def __init__(self, endpoint_url):
                self.endpoint_url = endpoint_url
                logger.warning(f"Created fallback solana Client with endpoint: {endpoint_url}")

            def get_balance(self, pubkey):
                logger.warning("Fallback solana: get_balance called but not implemented")
                return {"result": {"value": 0}}

    class commitment:
        class Commitment:
            def __init__(self, value):
                self.value = value

    class types:
        class TxOpts:
            def __init__(self, **kwargs):
                self.kwargs = kwargs

class transaction:
    class Transaction:
        def __init__(self, **kwargs):
            self.kwargs = kwargs

        def add(self, instruction):
            pass

        def sign(self, *signers):
            pass

        def serialize(self):
            return b''
EOL
      fi
      
      # Update pip and setuptools
      pip install --upgrade pip setuptools wheel
      
      # First install a compatible version of httpx
      pip install httpx==0.23.3
      
      # Install core dependencies using constraints
      pip install python-telegram-bot==20.8 python-dotenv==1.0.1 requests==2.31.0 aiohttp==3.9.3 certifi==2024.2.2 solders==0.19.0 base58==2.1.1
      
      # Try to install solana package bypassing dependency resolution
      echo "Installing solana package..."
      
      # Try direct download and install of wheel file
      echo "Method 1: Direct wheel installation"
      curl -L https://github.com/michaelhly/solana-py/releases/download/v0.31.0/solana-0.31.0-py3-none-any.whl -o solana-0.31.0-py3-none-any.whl
      pip install --no-deps solana-0.31.0-py3-none-any.whl
      
      # Fallback to pip install
      if ! python -c "import solana" &>/dev/null; then
        echo "Method 2: Pip install with --no-deps"
        pip install --no-deps solana==0.31.0
      fi

      # Fallback to GitHub install
      if ! python -c "import solana" &>/dev/null; then
        echo "Method 3: GitHub install"
        pip install --no-deps git+https://github.com/michaelhly/solana-py.git@v0.31.0
      fi
      
      # Check if solana is importable, if not use our fallback
      if ! python -c "import solana" &>/dev/null; then
        echo "All installation methods failed, using fallback solana module..."
        # Create a solana directory in site-packages
        SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
        mkdir -p "$SITE_PACKAGES/solana"
        touch "$SITE_PACKAGES/solana/__init__.py"
        cp fallback_solana.py "$SITE_PACKAGES/solana/__init__.py"
      fi
      
      # Verify installations
      echo "Verifying installations:"
      pip list | grep solders
      pip list | grep httpx
      pip list | grep python-telegram-bot
      python -c "import solana; print('Solana package is available')" || echo "Using fallback solana module"
    startCommand: python bot.py
    envVars:
      - key: TELEGRAM_BOT_TOKEN
        sync: false
      - key: AIRALO_API_KEY
        sync: false
    autoDeploy: true 